"use client"

import React, { useState, useEffect } from "react"
import { Card, CardContent } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Textarea } from "@/components/ui/textarea"
import { Table, TableRow, TableCell, TableHead, TableBody } from "@/components/ui/table"
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
  AlertDialogTrigger,
} from "@/components/ui/alert-dialog"
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog"
import { ChevronDown, ChevronUp, Pencil, Trash2, ClipboardCheck } from "lucide-react"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group"
import { Label } from "@/components/ui/label"
import { Checkbox } from "@/components/ui/checkbox"
import Image from "next/image"

const LeaderFollowUpApp = () => {
  const [sessions, setSessions] = useState([])
  const [formData, setFormData] = useState({
    id: null,
    type: "acompanamiento",
    leaderName: "",
    date: "",
    themes: [],
    ratings: {},
    observations: "",
    agreements: "",
    nextSessionDate: "",
    congratulations: "",
  })
  const [filter, setFilter] = useState("")
  const [expandedRows, setExpandedRows] = useState({})
  const [currentPage, setCurrentPage] = useState(1)
  const itemsPerPage = 5
  const [leaders, setLeaders] = useState([
    "Alejandra Maria Ortega Amariles",
    "Ana Catalina Soto Carvajal",
    "Ana Yirley Ayala Asprilla",
    "Andres Barrenche Cano",
    "Andres Esteban Buitrago Reyes",
    "Andres Mauricio Durango Taborda",
    "Astrid Viviana Patiño Torres",
    "Boris Dario Barrios Ulloa",
    "Catalina Arenas Londoño",
    "Cesar Augusto Mazuera Gallon",
    "Daniel Alexander Rivera Posada",
    "Daniel Alfonso Villamil",
    "Daniel Andres Marin Urrego",
    "Daniela Alzate Medina",
    "Daniela Andrea Arango Goez",
    "David Alzate Gomez",
    "Denis Alejandra Arcila Rojas",
    "Diana Giraldo Velez",
    "Edwin Alonso Garcia Hernandez",
    "Janier Jose Trujillo Trujillo",
    "Juan Carlos Castrillon Soto",
    "Juan Fernando Rios Garcia",
    "Julian Esteban Arboleda Salazar",
    "Luis Marcela Casas Rodas",
    "Maria Alejandra Perez Garcia",
    "Maria Paulina Restrepo Bedoya",
    "Monica Patricia Ramirez Arbelaez",
    "Valentina Ortiz Ruiz",
    "Victor Eduardo Florez Rojas",
  ])
  const [followUpData, setFollowUpData] = useState({
    id: null,
    followUp: "",
    themes: [],
    ratings: {},
    nextSessionDate: "",
    numericValue: "",
  })
  const [leadersWithSessions, setLeadersWithSessions] = useState([])
  const [filterType, setFilterType] = useState("all")

  const themes = [
    {
      name: "Habilidades de comunicación",
      questions: [
        "El líder comunica claramente los objetivos y expectativas del equipo.",
        "Escucha activamente las opiniones y preocupaciones del equipo.",
        "Proporciona retroalimentación constructiva y adecuada.",
      ],
    },
    {
      name: "Relaciones Interpersonales y Motivación",
      questions: [
        "El líder crea un ambiente de trabajo inclusivo y de confianza.",
        "Inspira y motiva al equipo a alcanzar sus metas.",
        "Reconoce y valora los logros individuales y del equipo.",
      ],
    },
    {
      name: "Gestión y Delegación",
      questions: [
        "El líder asigna tareas y responsabilidades de manera justa y efectiva.",
        "Proporciona el apoyo necesario para que el equipo cumpla con sus responsabilidades.",
        "Promueve la autonomía y el empoderamiento del equipo.",
      ],
    },
    {
      name: "Resolución de Conflictos",
      questions: [
        "El líder aborda los conflictos de manera oportuna en lugar de evitarlos.",
        "El líder facilita conversaciones efectivas para resolver conflictos entre los miembros del equipo.",
        "Es imparcial al mediar en situaciones de conflicto.",
      ],
    },
    {
      name: "Toma de decisiones",
      questions: [
        "Es capaz de tomar decisiones rápidamente cuando es necesario.",
        "El líder prioriza las necesidades del equipo y los objetivos organizacionales en sus decisiones.",
        "Explica claramente las razones detrás de sus decisiones.",
        "Las decisiones tomadas por el líder suelen ser efectivas y generan resultados positivos.",
        "Muestra disposición para ajustar decisiones si se demuestra que una alternativa es mejor.",
      ],
    },
  ]

  useEffect(() => {
    updateLeadersWithSessions()
  }, [])

  const updateLeadersWithSessions = () => {
    const uniqueLeaders = [...new Set(sessions.map((session) => session.leaderName))]
    setLeadersWithSessions(uniqueLeaders)
  }

  const handleChange = (e) => {
    const { name, value } = e.target
    setFormData({ ...formData, [name]: value })
  }

  const handleRatingChange = (theme: string, question: string, rating: string) => {
    setFormData((prev) => ({
      ...prev,
      ratings: {
        ...prev.ratings,
        [theme]: {
          ...prev.ratings[theme],
          [question]: rating,
        },
      },
    }))
  }

  const handleAddSession = () => {
    if (!formData.leaderName || !formData.date) {
      alert("Por favor, ingrese al menos el nombre del líder y la fecha.")
      return
    }

    if (formData.id === null) {
      const newSession = { ...formData, id: Date.now() }
      setSessions([...sessions, newSession])
      if (newSession.leaderName && !leaders.includes(newSession.leaderName)) {
        setLeaders([...leaders, newSession.leaderName])
      }
    } else {
      setSessions(sessions.map((session) => (session.id === formData.id ? { ...formData } : session)))
    }
    resetForm()
  }

  const resetForm = () => {
    setFormData({
      id: null,
      type: "acompanamiento",
      leaderName: "",
      date: "",
      themes: [],
      ratings: {},
      observations: "",
      agreements: "",
      nextSessionDate: "",
      congratulations: "",
    })
  }

  const handleEditSession = (session) => {
    setFormData({ ...session })
  }

  const handleDeleteSession = (id) => {
    setSessions(sessions.filter((session) => session.id !== id))
  }

  const toggleExpandRow = (id) => {
    setExpandedRows((prev) => ({ ...prev, [id]: !prev[id] }))
  }

  const handleFollowUp = (session) => {
    setFollowUpData({
      id: session.id,
      followUp: session.followUp || "",
      themes: [],
      ratings: {},
      nextSessionDate: session.nextSessionDate || "",
      numericValue: session.numericValue || "",
    })
  }

  const handleFollowUpChange = (e) => {
    const { name, value } = e.target
    setFollowUpData({ ...followUpData, [name]: value })
  }

  const handleFollowUpRatingChange = (theme: string, question: string, rating: string) => {
    setFollowUpData((prev) => ({
      ...prev,
      ratings: {
        ...prev.ratings,
        [theme]: {
          ...prev.ratings[theme],
          [question]: rating,
        },
      },
    }))
  }

  const handleFollowUpThemeSelection = (themeName: string) => {
    setFollowUpData((prev) => ({
      ...prev,
      themes: prev.themes.includes(themeName)
        ? prev.themes.filter((t) => t !== themeName)
        : [...prev.themes, themeName],
    }))
  }

  const saveFollowUp = () => {
    setSessions(
      sessions.map((session) =>
        session.id === followUpData.id
          ? {
              ...session,
              followUp: followUpData.followUp,
              followUpThemes: followUpData.themes,
              followUpRatings: followUpData.ratings,
              nextSessionDate: followUpData.nextSessionDate,
              numericValue: followUpData.numericValue,
            }
          : session,
      ),
    )
    setFollowUpData({ id: null, followUp: "", themes: [], ratings: {}, nextSessionDate: "", numericValue: "" })
  }

  const handleThemeSelection = (themeName: string) => {
    setFormData((prev) => ({
      ...prev,
      themes: prev.themes.includes(themeName)
        ? prev.themes.filter((t) => t !== themeName)
        : [...prev.themes, themeName],
    }))
  }

  const filteredSessions = sessions.filter((session) => {
    if (filterType === "all") {
      return filter ? session.leaderName.toLowerCase().includes(filter.toLowerCase()) : true
    } else if (filterType === "withSessions") {
      return (
        leadersWithSessions.includes(session.leaderName) &&
        (filter ? session.leaderName.toLowerCase().includes(filter.toLowerCase()) : true)
      )
    }
    return true
  })

  const paginatedSessions = filteredSessions.slice((currentPage - 1) * itemsPerPage, currentPage * itemsPerPage)

  const exportToCSV = () => {
    const headers = [
      "Tipo",
      "Líder",
      "Fecha",
      "Temas",
      ...themes.flatMap((theme) => theme.questions.map((q) => `${theme.name} - ${q}`)),
      "Observaciones",
      "Acuerdos",
      "Fecha Próximo Acompañamiento",
      "Felicitaciones",
      "Seguimiento",
      "Valor Numérico",
      ...themes.flatMap((theme) => theme.questions.map((q) => `Seguimiento ${theme.name} - ${q}`)),
    ]

    const csvContent = [
      headers,
      ...sessions.map((session) => [
        session.type,
        session.leaderName,
        session.date,
        session.themes.join(", "),
        ...themes.flatMap((theme) => theme.questions.map((q) => session.ratings[theme.name]?.[q] || "")),
        session.observations,
        session.agreements,
        session.nextSessionDate,
        session.congratulations,
        session.followUp,
        session.numericValue || "",
        ...themes.flatMap((theme) => theme.questions.map((q) => session.followUpRatings?.[theme.name]?.[q] || "")),
      ]),
    ]
      .map((row) => row.map((cell) => `"${cell}"`).join(";"))
      .join("\n")

    const blob = new Blob(["\ufeff" + csvContent], { type: "text/csv;charset=utf-8;" })
    const url = URL.createObjectURL(blob)
    const link = document.createElement("a")
    link.href = url
    link.download = "seguimiento_lideres.csv"
    link.click()
  }

  return (
    <div
      className="min-h-screen bg-cover bg-center bg-no-repeat"
      style={{
        backgroundImage:
          "url('https://hebbkx1anhila5yf.public.blob.vercel-storage.com/Plantilla%20indicadores%20PBI.jpg-kMZlxxKBR07sMe1xfjqUnMwsiqmUv0.jpeg')",
      }}
    >
      <div className="p-6 bg-white bg-opacity-90">
        <div className="flex items-center gap-4 mb-6">
          <Image
            src="https://hebbkx1anhila5yf.public.blob.vercel-storage.com/LOGO-SITTI-HORIZONTAL-fDZDqMqo9Y3lugCGnxGrMHIyQtuC5Z.png"
            alt="SITTI Logo"
            width={150}
            height={50}
            className="object-contain"
          />
          <h1 className="text-2xl font-bold">Seguimiento a Líderes</h1>
        </div>

        <Card className="mb-6">
          <CardContent>
            <h2 className="text-lg font-semibold mb-3">
              {formData.id === null ? "Agregar Seguimiento" : "Editar Seguimiento"}
            </h2>
            <Tabs
              defaultValue="acompanamiento"
              className="w-full"
              onValueChange={(value) => setFormData({ ...formData, type: value })}
            >
              <TabsList className="grid w-full grid-cols-2">
                <TabsTrigger value="acompanamiento">Acompañamiento</TabsTrigger>
                <TabsTrigger value="felicitaciones">Felicitaciones</TabsTrigger>
              </TabsList>
              <TabsContent value="acompanamiento">
                <div className="grid grid-cols-1 gap-4 sm:grid-cols-2">
                  <Select
                    name="leaderName"
                    onValueChange={(value) => setFormData((prev) => ({ ...prev, leaderName: value }))}
                  >
                    <SelectTrigger className="w-full">
                      <SelectValue placeholder="Seleccionar líder" />
                    </SelectTrigger>
                    <SelectContent>
                      {leaders.map((leader) => (
                        <SelectItem key={leader} value={leader}>
                          {leader}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                  <Input
                    type="date"
                    name="date"
                    placeholder="Fecha"
                    value={formData.date}
                    onChange={handleChange}
                    required
                  />
                </div>
                <div className="mt-4">
                  <h3 className="font-semibold mb-2">Seleccionar temas:</h3>
                  {themes.map((theme) => (
                    <div key={theme.name} className="flex items-center space-x-2 mt-2">
                      <Checkbox
                        id={theme.name}
                        checked={formData.themes.includes(theme.name)}
                        onCheckedChange={() => handleThemeSelection(theme.name)}
                      />
                      <label
                        htmlFor={theme.name}
                        className="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
                      >
                        {theme.name}
                      </label>
                    </div>
                  ))}
                </div>
                {formData.themes.length > 0 && (
                  <div className="mt-4">
                    <h3 className="font-semibold mb-2">Calificaciones:</h3>
                    {formData.themes.map((selectedTheme) => (
                      <div key={selectedTheme} className="mb-4">
                        <h4 className="font-semibold mt-2">{selectedTheme}</h4>
                        {themes
                          .find((t) => t.name === selectedTheme)
                          ?.questions.map((question, index) => (
                            <div key={index} className="mb-4">
                              <p className="mb-2">{question}</p>
                              <RadioGroup
                                onValueChange={(value) => handleRatingChange(selectedTheme, question, value)}
                                className="flex space-x-2"
                              >
                                {[1, 2, 3, 4, 5].map((rating) => (
                                  <div key={rating} className="flex items-center">
                                    <RadioGroupItem
                                      value={rating.toString()}
                                      id={`${selectedTheme}-${index}-${rating}`}
                                    />
                                    <Label htmlFor={`${selectedTheme}-${index}-${rating}`} className="ml-1">
                                      {rating}
                                    </Label>
                                  </div>
                                ))}
                              </RadioGroup>
                            </div>
                          ))}
                      </div>
                    ))}
                  </div>
                )}
                <Textarea
                  name="observations"
                  placeholder="Observaciones"
                  value={formData.observations}
                  onChange={handleChange}
                  className="mt-4"
                />
                <Textarea
                  name="agreements"
                  placeholder="Acuerdos"
                  value={formData.agreements}
                  onChange={handleChange}
                  className="mt-4"
                />
                <div className="mt-4">
                  <Label htmlFor="nextSessionDate">Fecha del próximo acompañamiento</Label>
                  <Input
                    type="date"
                    id="nextSessionDate"
                    name="nextSessionDate"
                    value={formData.nextSessionDate}
                    onChange={handleChange}
                    className="mt-1"
                  />
                </div>
              </TabsContent>
              <TabsContent value="felicitaciones">
                <div className="grid grid-cols-1 gap-4 sm:grid-cols-2">
                  <Select
                    name="leaderName"
                    onValueChange={(value) => setFormData((prev) => ({ ...prev, leaderName: value }))}
                  >
                    <SelectTrigger className="w-full">
                      <SelectValue placeholder="Seleccionar líder" />
                    </SelectTrigger>
                    <SelectContent>
                      {leaders.map((leader) => (
                        <SelectItem key={leader} value={leader}>
                          {leader}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                  <Input
                    type="date"
                    name="date"
                    placeholder="Fecha"
                    value={formData.date}
                    onChange={handleChange}
                    required
                  />
                </div>
                <Textarea
                  name="congratulations"
                  placeholder="Felicitaciones"
                  value={formData.congratulations}
                  onChange={handleChange}
                  className="mt-4"
                />
              </TabsContent>
            </Tabs>
            <AlertDialog>
              <AlertDialogTrigger asChild>
                <Button className="mt-4 w-full">{formData.id === null ? "Agregar" : "Guardar cambios"}</Button>
              </AlertDialogTrigger>
              <AlertDialogContent>
                <AlertDialogHeader>
                  <AlertDialogTitle>¿Estás seguro?</AlertDialogTitle>
                  <AlertDialogDescription>
                    Esta acción{" "}
                    {formData.id === null ? "agregará un nuevo registro" : "actualizará el registro existente"}.
                  </AlertDialogDescription>
                </AlertDialogHeader>
                <AlertDialogFooter>
                  <AlertDialogCancel>Cancelar</AlertDialogCancel>
                  <AlertDialogAction onClick={handleAddSession}>Confirmar</AlertDialogAction>
                </AlertDialogFooter>
              </AlertDialogContent>
            </AlertDialog>
          </CardContent>
        </Card>

        <Card className="mb-6">
          <CardContent>
            <h2 className="text-lg font-semibold mb-3">Filtrar por Líder</h2>
            <div className="flex space-x-2">
              <Select onValueChange={(value) => setFilterType(value)}>
                <SelectTrigger className="w-[180px]">
                  <SelectValue placeholder="Tipo de búsqueda" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all">Todos los líderes</SelectItem>
                  <SelectItem value="withSessions">Líderes con seguimientos</SelectItem>
                </SelectContent>
              </Select>
              <Select onValueChange={(value) => setFilter(value === "all" ? "" : value)}>
                <SelectTrigger className="w-[180px]">
                  <SelectValue placeholder="Seleccionar líder" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all">Todos los líderes</SelectItem>
                  {(filterType === "withSessions" ? leadersWithSessions : leaders).map((leader) => (
                    <SelectItem key={leader} value={leader}>
                      {leader}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
              <Input
                placeholder="Buscar por nombre del líder"
                value={filter}
                onChange={(e) => setFilter(e.target.value)}
                className="flex-grow"
              />
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent>
            <div className="flex justify-between items-center mb-3">
              <h2 className="text-lg font-semibold">Historial de Seguimientos</h2>
              <Button onClick={exportToCSV}>Exportar a CSV</Button>
            </div>
            {paginatedSessions.length > 0 ? (
              <>
                <Table>
                  <TableHead>
                    <TableRow>
                      <TableCell>Tipo</TableCell>
                      <TableCell>Líder</TableCell>
                      <TableCell>Fecha</TableCell>
                      <TableCell>Acciones</TableCell>
                    </TableRow>
                  </TableHead>
                  <TableBody>
                    {paginatedSessions.map((session) => (
                      <React.Fragment key={session.id}>
                        <TableRow>
                          <TableCell>
                            {session.type === "acompanamiento" ? "Acompañamiento" : "Felicitaciones"}
                          </TableCell>
                          <TableCell>{session.leaderName}</TableCell>
                          <TableCell>{session.date}</TableCell>
                          <TableCell>
                            <div className="flex space-x-2">
                              <Button variant="outline" size="sm" onClick={() => toggleExpandRow(session.id)}>
                                {expandedRows[session.id] ? <ChevronUp /> : <ChevronDown />}
                              </Button>
                              <Button variant="outline" size="sm" onClick={() => handleEditSession(session)}>
                                <Pencil className="h-4 w-4" />
                              </Button>
                              <AlertDialog>
                                <AlertDialogTrigger asChild>
                                  <Button variant="outline" size="sm">
                                    <Trash2 className="h-4 w-4" />
                                  </Button>
                                </AlertDialogTrigger>
                                <AlertDialogContent>
                                  <AlertDialogHeader>
                                    <AlertDialogTitle>¿Estás seguro?</AlertDialogTitle>
                                    <AlertDialogDescription>
                                      Esta acción eliminará el registro permanentemente.
                                    </AlertDialogDescription>
                                  </AlertDialogHeader>
                                  <AlertDialogFooter>
                                    <AlertDialogCancel>Cancelar</AlertDialogCancel>
                                    <AlertDialogAction onClick={() => handleDeleteSession(session.id)}>
                                      Eliminar
                                    </AlertDialogAction>
                                  </AlertDialogFooter>
                                </AlertDialogContent>
                              </AlertDialog>
                              <Dialog>
                                <DialogTrigger asChild>
                                  <Button variant="outline" size="sm" onClick={() => handleFollowUp(session)}>
                                    <ClipboardCheck className="h-4 w-4" />
                                  </Button>
                                </DialogTrigger>
                                <DialogContent className="sm:max-w-[425px] max-h-[80vh] overflow-y-auto">
                                  <DialogHeader>
                                    <DialogTitle>Seguimiento de Acuerdos</DialogTitle>
                                    <DialogDescription>
                                      Actualiza el seguimiento de los acuerdos para esta sesión.
                                    </DialogDescription>
                                  </DialogHeader>
                                  <div className="grid gap-4 py-4">
                                    <div className="grid grid-cols-4 items-center gap-4">
                                      <Textarea
                                        id="followUp"
                                        name="followUp"
                                        className="col-span-4"
                                        value={followUpData.followUp}
                                        onChange={handleFollowUpChange}
                                        placeholder="Ingrese el seguimiento de los acuerdos..."
                                      />
                                    </div>
                                    <div className="grid grid-cols-4 items-center gap-4">
                                      <Label htmlFor="numericValue" className="text-right">
                                        Valor numérico:
                                      </Label>
                                      <Input
                                        id="numericValue"
                                        name="numericValue"
                                        type="number"
                                        value={followUpData.numericValue}
                                        onChange={handleFollowUpChange}
                                        className="col-span-3"
                                      />
                                    </div>
                                    <div className="mt-4">
                                      <h3 className="font-semibold mb-2">Seleccionar temas para validación:</h3>
                                      {themes.map((theme) => (
                                        <div key={theme.name} className="flex items-center space-x-2 mt-2">
                                          <Checkbox
                                            id={`followUp-${theme.name}`}
                                            checked={followUpData.themes.includes(theme.name)}
                                            onCheckedChange={() => handleFollowUpThemeSelection(theme.name)}
                                          />
                                          <label
                                            htmlFor={`followUp-${theme.name}`}
                                            className="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
                                          >
                                            {theme.name}
                                          </label>
                                        </div>
                                      ))}
                                    </div>
                                    {followUpData.themes.length > 0 && (
                                      <div className="mt-4">
                                        <h3 className="font-semibold mb-2">Calificaciones de seguimiento:</h3>
                                        {followUpData.themes.map((selectedTheme) => (
                                          <div key={selectedTheme} className="mb-4">
                                            <h4 className="font-semibold mt-2">{selectedTheme}</h4>
                                            {themes
                                              .find((t) => t.name === selectedTheme)
                                              ?.questions.map((question, index) => (
                                                <div key={index} className="mb-4">
                                                  <p className="mb-2">{question}</p>
                                                  <RadioGroup
                                                    onValueChange={(value) =>
                                                      handleFollowUpRatingChange(selectedTheme, question, value)
                                                    }
                                                    className="flex space-x-2"
                                                  >
                                                    {[1, 2, 3, 4, 5].map((rating) => (
                                                      <div key={rating} className="flex items-center">
                                                        <RadioGroupItem
                                                          value={rating.toString()}
                                                          id={`followUp-${selectedTheme}-${index}-${rating}`}
                                                        />
                                                        <Label
                                                          htmlFor={`followUp-${selectedTheme}-${index}-${rating}`}
                                                          className="ml-1"
                                                        >
                                                          {rating}
                                                        </Label>
                                                      </div>
                                                    ))}
                                                  </RadioGroup>
                                                </div>
                                              ))}
                                          </div>
                                        ))}
                                      </div>
                                    )}
                                    <div className="mt-4">
                                      <Label htmlFor="nextSessionDate">Fecha del próximo acompañamiento</Label>
                                      <Input
                                        type="date"
                                        id="nextSessionDate"
                                        name="nextSessionDate"
                                        value={followUpData.nextSessionDate}
                                        onChange={handleFollowUpChange}
                                        className="mt-1"
                                      />
                                    </div>
                                  </div>
                                  <DialogFooter>
                                    <Button
                                      onClick={() => {
                                        saveFollowUp()
                                        document.body.click() // This will close the dialog
                                      }}
                                    >
                                      Guardar seguimiento
                                    </Button>
                                  </DialogFooter>
                                </DialogContent>
                              </Dialog>
                            </div>
                          </TableCell>
                        </TableRow>
                        {expandedRows[session.id] && (
                          <TableRow>
                            <TableCell colSpan={4}>
                              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                                <div>
                                  <h4 className="font-semibold">Temas y Calificaciones</h4>
                                  {session.themes.map((theme) => (
                                    <div key={theme} className="mt-2">
                                      <h5 className="font-semibold">{theme}</h5>
                                      {Object.entries(session.ratings[theme] || {}).map(([question, rating]) => (
                                        <p key={question}>
                                          {question}: {rating}
                                        </p>
                                      ))}
                                    </div>
                                  ))}
                                </div>
                                {session.type === "acompanamiento" ? (
                                  <>
                                    <div>
                                      <h4 className="font-semibold">Observaciones</h4>
                                      <p>{session.observations}</p>
                                    </div>
                                    <div>
                                      <h4 className="font-semibold">Acuerdos</h4>
                                      <p>{session.agreements}</p>
                                    </div>
                                    <div>
                                      <h4 className="font-semibold">Fecha del próximo acompañamiento</h4>
                                      <p>{session.nextSessionDate}</p>
                                    </div>
                                  </>
                                ) : (
                                  <div>
                                    <h4 className="font-semibold">Felicitaciones</h4>
                                    <p>{session.congratulations}</p>
                                  </div>
                                )}
                                <div>
                                  <h4 className="font-semibold">Seguimiento</h4>
                                  <p>{session.followUp}</p>
                                  {session.numericValue && (
                                    <p>
                                      <strong>Valor numérico:</strong> {session.numericValue}
                                    </p>
                                  )}
                                </div>
                                {session.followUpThemes && session.followUpThemes.length > 0 && (
                                  <div>
                                    <h4 className="font-semibold">Temas y Calificaciones de Seguimiento</h4>
                                    {session.followUpThemes.map((theme) => (
                                      <div key={theme} className="mt-2">
                                        <h5 className="font-semibold">{theme}</h5>
                                        {Object.entries(session.followUpRatings[theme] || {}).map(
                                          ([question, rating]) => (
                                            <p key={question}>
                                              {question}: {rating}
                                            </p>
                                          ),
                                        )}
                                      </div>
                                    ))}
                                  </div>
                                )}
                              </div>
                            </TableCell>
                          </TableRow>
                        )}
                      </React.Fragment>
                    ))}
                  </TableBody>
                </Table>
                <div className="flex justify-between items-center mt-4">
                  <Button onClick={() => setCurrentPage((prev) => Math.max(prev - 1, 1))} disabled={currentPage === 1}>
                    Anterior
                  </Button>
                  <span>
                    Página {currentPage} de {Math.ceil(filteredSessions.length / itemsPerPage)}
                  </span>
                  <Button
                    onClick={() =>
                      setCurrentPage((prev) => Math.min(prev + 1, Math.ceil(filteredSessions.length / itemsPerPage)))
                    }
                    disabled={currentPage === Math.ceil(filteredSessions.length / itemsPerPage)}
                  >
                    Siguiente
                  </Button>
                </div>
              </>
            ) : (
              <p>No hay registros que coincidan con el filtro.</p>
            )}
          </CardContent>
        </Card>
      </div>
    </div>
  )
}

export default LeaderFollowUpApp  
